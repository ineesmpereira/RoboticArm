#include "VarSpeedServo.h"

#define BASE_HGT 95 //base height
#define HUMERUS 125 //shoulder-to-elbow "bone"
#define ULNA 95 //elbow-to-wrist "bone"
#define GRIPPER 160 //gripper (incl.heavy duty wrist rotate mechanism) length "
#define ftl(x) ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)) //float to long conversion

#define BAS_SERVO 11
#define SHL_SERVO 10
#define ELB_SERVO 9
#define WRI_SERVO 6
#define WRO_SERVO 5

float hum_sq = HUMERUS * HUMERUS;
float uln_sq = ULNA * ULNA;
int servoSPeed = 10;

VarSpeedServo servo1, servo2, servo3, servo4, servo5, servo6;

int loopCounter = 0;
int pulseWidth = 6.6;
int microsecondsToDegrees;

void setup() {
  servo1.attach( BAS_SERVO, 544, 2400 );
  servo2.attach( SHL_SERVO, 544, 2400 );
  servo3.attach( ELB_SERVO, 544, 2400 );
  servo4.attach( WRI_SERVO, 544, 2400 );
  servo5.attach( WRO_SERVO, 544, 2400 );
  servo4.write(0);
  delay( 5500 );
  servo_park();
  delay(4000);
  Serial.begin(9600);
  Serial.println("Start");
}

void loop(){
  line();
  delay(4000);
  servo_park();
}

void set_arm( float x, float y, float z, float grip_angle_d, int servoSpeed ){

  float grip_angle_r = radians( grip_angle_d ); //grip angle in radians for use in calculations

  /* Base angle and radial distance from x,y coordinates */
  float bas_angle_r = atan2( x, y );

  float rdist = sqrt(( x * x ) + ( y * y ));

  /* rdist is y coordinate for the arm */
  y = rdist;

  /* Grip offsets calculated based on grip angle */
  float grip_off_z = ( sin( grip_angle_r )) * GRIPPER;
  float grip_off_y = ( cos( grip_angle_r )) * GRIPPER;

  /* Wrist position */
  float wrist_z = ( z - grip_off_z ) - BASE_HGT;
  float wrist_y = y - grip_off_y;

  /* Shoulder to wrist distance ( AKA sw ) */
  float s_w = ( wrist_z * wrist_z ) + ( wrist_y * wrist_y );
  float s_w_sqrt = sqrt( s_w );

  /* s_w angle to ground */
  float a1 = atan2( wrist_z, wrist_y );

  /* s_w angle to humerus */
  float a2 = acos((( hum_sq - uln_sq ) + s_w ) / ( 2 * HUMERUS * s_w_sqrt ));

  /* shoulder angle */
  float shl_angle_r = a1 + a2;
  float shl_angle_d = degrees( shl_angle_r );

  /* elbow angle */
  float elb_angle_r = acos(( hum_sq + uln_sq - s_w ) / ( 2 * HUMERUS * ULNA ));
  float elb_angle_d = degrees( elb_angle_r );
  float elb_angle_dn = -( 180.0 - elb_angle_d );

  /* wrist angle */
  float wri_angle_d = ( grip_angle_d - elb_angle_dn ) - shl_angle_d;

  /* Servo pulses */
  float bas_servopulse = 1500.0 - (( degrees( bas_angle_r )) * pulseWidth );
  float shl_servopulse = 1500.0 + (( shl_angle_d - 90.0 ) * pulseWidth );
  float elb_servopulse = 1500.0 - (( elb_angle_d - 90.0 ) * pulseWidth );
  float wri_servopulse = 1500 - ( wri_angle_d * pulseWidth );// updated 2018/2/11 by jimrd - I changed the plus to a minus - not sure how this code worked for anyone before. Could be that the elbow servo was mounted with 0 degrees facing down rather than up.

  /* Set servos */
  microsecondsToDegrees = map(ftl(bas_servopulse), 544, 2400, 0, 180);
  servo1.write(microsecondsToDegrees, servoSpeed); // use this function so that you can set servo speed //

  microsecondsToDegrees = map(ftl(shl_servopulse), 544, 2400, 0, 180);
  servo2.write(microsecondsToDegrees, servoSpeed);


  microsecondsToDegrees = map(ftl(elb_servopulse), 544, 2400, 0, 180);
  servo3.write(microsecondsToDegrees, servoSpeed);

  microsecondsToDegrees = map(ftl(wri_servopulse), 544, 2400, 0, 180);
  servo4.write(microsecondsToDegrees, servoSpeed);
}

/* move servos to parking position */
void servo_park(){
  servo1.write(90, 10);
  servo2.write(90, 10);
  servo3.write(90, 10);
  servo4.write(90, 10);
  servo5.write(90, 10);
  return;
}

/* moves arm in a straight line */
void line(){
  for ( double xaxis = -100.0; xaxis < 100.0; xaxis += 0.5 ) {
    set_arm( xaxis, 250, 100, 0 , 10);
    delay( 10 );
  }

  for ( float xaxis = 100.0; xaxis > -100.0; xaxis -= 0.5 ) {
    set_arm( xaxis, 250, 100, 0 , 10);
    delay( 10 );
  }
}

void square(){
  for ( double xaxis = -200.0; xaxis < 200.0; xaxis += 0.5 ) {
    set_arm( xaxis, 250, 50, 0 , 10);
    delay( 10 );
  }

  for ( float xaxis = 200.0; xaxis > -200.0; xaxis -= 0.5 ) {
    set_arm( xaxis, 250, 120, 0 , 10);
    delay( 10 );
  }
}

void circle(){
  #define RADIUS 50.0
  //float angle = 0;
  float zaxis, yaxis;

  for ( float angle = 0.0; angle < 360.0; angle += 1.0 ) {
    yaxis = RADIUS * sin( radians( angle )) + 200;
    zaxis = RADIUS * cos( radians( angle )) + 300;
    set_arm(zaxis, yaxis, 300, 0 , 50);
    delay( 10 );
  }
}
